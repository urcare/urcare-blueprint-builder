
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { 
  CheckSquare, 
  Clock, 
  AlertTriangle, 
  Plus,
  User,
  Calendar,
  ArrowUp,
  ArrowDown,
  Bot
} from 'lucide-react';

interface DynamicTask {
  id: string;
  title: string;
  description: string;
  assignedTo: string;
  department: string;
  priority: 'urgent' | 'high' | 'normal' | 'low';
  status: 'pending' | 'in_progress' | 'completed' | 'overdue';
  dueDate: string;
  estimatedDuration: string;
  dependencies: string[];
  autoGenerated: boolean;
  completionPercentage: number;
  aiSuggested: boolean;
}

const mockTasks: DynamicTask[] = [
  {
    id: 'DT001',
    title: 'Pre-operative Assessment',
    description: 'Complete pre-operative checklist for cardiac catheterization',
    assignedTo: 'Dr. Sarah Wilson',
    department: 'Cardiology',
    priority: 'urgent',
    status: 'pending',
    dueDate: '2024-01-15 14:00',
    estimatedDuration: '30 mins',
    dependencies: ['Lab Results', 'Consent Forms'],
    autoGenerated: true,
    completionPercentage: 0,
    aiSuggested: true
  },
  {
    id: 'DT002',
    title: 'Medication Reconciliation',
    description: 'Review and update patient medication list',
    assignedTo: 'Nurse Jennifer Lee',
    department: 'Pharmacy',
    priority: 'high',
    status: 'in_progress',
    dueDate: '2024-01-15 16:00',
    estimatedDuration: '15 mins',
    dependencies: [],
    autoGenerated: true,
    completionPercentage: 65,
    aiSuggested: false
  }
];

export const DynamicTaskManagementSystem = () => {
  const [tasks] = useState<DynamicTask[]>(mockTasks);
  const [selectedTask, setSelectedTask] = useState<DynamicTask | null>(null);

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'urgent': return 'bg-red-500 text-white';
      case 'high': return 'bg-orange-500 text-white';
      case 'normal': return 'bg-blue-500 text-white';
      case 'low': return 'bg-green-500 text-white';
      default: return 'bg-gray-500 text-white';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending': return 'bg-yellow-500 text-white';
      case 'in_progress': return 'bg-blue-500 text-white';
      case 'completed': return 'bg-green-500 text-white';
      case 'overdue': return 'bg-red-500 text-white';
      default: return 'bg-gray-500 text-white';
    }
  };

  const PriorityIcon = ({ priority }: { priority: string }) => {
    if (priority === 'urgent' || priority === 'high') {
      return <ArrowUp className="h-3 w-3" />;
    }
    if (priority === 'low') {
      return <ArrowDown className="h-3 w-3" />;
    }
    return null;
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CheckSquare className="h-5 w-5" />
            Dynamic Task Management System
          </CardTitle>
          <CardDescription>
            Intelligent checklist creation with priority adjustment and completion tracking
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid gap-4 mb-6">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <Card className="p-4 border-blue-200 bg-blue-50">
                <div className="flex items-center gap-2">
                  <CheckSquare className="h-8 w-8 text-blue-600" />
                  <div>
                    <p className="text-2xl font-bold text-blue-600">{tasks.length}</p>
                    <p className="text-sm text-gray-600">Active Tasks</p>
                  </div>
                </div>
              </Card>
              <Card className="p-4 border-green-200 bg-green-50">
                <div className="flex items-center gap-2">
                  <Bot className="h-8 w-8 text-green-600" />
                  <div>
                    <p className="text-2xl font-bold text-green-600">{tasks.filter(t => t.autoGenerated).length}</p>
                    <p className="text-sm text-gray-600">Auto-Generated</p>
                  </div>
                </div>
              </Card>
              <Card className="p-4 border-orange-200 bg-orange-50">
                <div className="flex items-center gap-2">
                  <AlertTriangle className="h-8 w-8 text-orange-600" />
                  <div>
                    <p className="text-2xl font-bold text-orange-600">{tasks.filter(t => t.priority === 'urgent').length}</p>
                    <p className="text-sm text-gray-600">Urgent Tasks</p>
                  </div>
                </div>
              </Card>
              <Card className="p-4 border-purple-200 bg-purple-50">
                <div className="flex items-center gap-2">
                  <Clock className="h-8 w-8 text-purple-600" />
                  <div>
                    <p className="text-2xl font-bold text-purple-600">87%</p>
                    <p className="text-sm text-gray-600">On-Time Rate</p>
                  </div>
                </div>
              </Card>
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-semibold">Dynamic Task Queue</h3>
                <Button size="sm">
                  <Plus className="h-4 w-4 mr-1" />
                  Generate Tasks
                </Button>
              </div>
              {tasks.map((task) => (
                <Card 
                  key={task.id} 
                  className={`cursor-pointer transition-colors ${selectedTask?.id === task.id ? 'ring-2 ring-blue-500' : ''} border-l-4 border-l-blue-400`}
                  onClick={() => setSelectedTask(task)}
                >
                  <CardContent className="p-4">
                    <div className="flex justify-between items-start mb-3">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-1">
                          <h4 className="font-semibold">{task.title}</h4>
                          {task.aiSuggested && (
                            <Badge variant="outline" className="text-xs">
                              <Bot className="h-3 w-3 mr-1" />
                              AI Suggested
                            </Badge>
                          )}
                        </div>
                        <p className="text-sm text-gray-600 mb-2">{task.description}</p>
                        <div className="flex items-center gap-4 text-sm text-gray-500">
                          <div className="flex items-center gap-1">
                            <User className="h-3 w-3" />
                            <span>{task.assignedTo}</span>
                          </div>
                          <div className="flex items-center gap-1">
                            <Calendar className="h-3 w-3" />
                            <span>{task.dueDate}</span>
                          </div>
                        </div>
                      </div>
                      <div className="flex flex-col gap-2">
                        <Badge className={getPriorityColor(task.priority)}>
                          <PriorityIcon priority={task.priority} />
                          <span className="ml-1">{task.priority.toUpperCase()}</span>
                        </Badge>
                        <Badge className={getStatusColor(task.status)}>
                          {task.status.replace('_', ' ').toUpperCase()}
                        </Badge>
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <div className="flex justify-between items-center text-sm">
                        <span>Progress</span>
                        <span className="font-bold">{task.completionPercentage}%</span>
                      </div>
                      <Progress value={task.completionPercentage} className="h-2" />
                      
                      <div className="flex justify-between items-center mt-2">
                        <span className="text-sm text-gray-500">Est. {task.estimatedDuration}</span>
                        {task.autoGenerated && (
                          <Badge variant="outline" className="text-xs">
                            Auto-Generated
                          </Badge>
                        )}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>

            <div>
              {selectedTask ? (
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">{selectedTask.title}</CardTitle>
                    <CardDescription>{selectedTask.department}</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div>
                        <h4 className="font-medium mb-2">Task Details</h4>
                        <p className="text-sm text-gray-700">{selectedTask.description}</p>
                      </div>
                      
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <h4 className="font-medium mb-2">Assignment</h4>
                          <div className="space-y-1 text-sm">
                            <p>Assigned to: <strong>{selectedTask.assignedTo}</strong></p>
                            <p>Department: <strong>{selectedTask.department}</strong></p>
                            <p>Due: <strong>{selectedTask.dueDate}</strong></p>
                          </div>
                        </div>
                        <div>
                          <h4 className="font-medium mb-2">Status</h4>
                          <div className="space-y-1 text-sm">
                            <p>Priority: <strong>{selectedTask.priority}</strong></p>
                            <p>Status: <strong>{selectedTask.status.replace('_', ' ')}</strong></p>
                            <p>Progress: <strong>{selectedTask.completionPercentage}%</strong></p>
                          </div>
                        </div>
                      </div>
                      
                      {selectedTask.dependencies.length > 0 && (
                        <div>
                          <h4 className="font-medium mb-2">Dependencies</h4>
                          <div className="flex flex-wrap gap-2">
                            {selectedTask.dependencies.map((dep, index) => (
                              <Badge key={index} variant="outline">{dep}</Badge>
                            ))}
                          </div>
                        </div>
                      )}
                      
                      <div>
                        <h4 className="font-medium mb-2">AI Recommendations</h4>
                        <div className="text-sm bg-blue-50 p-3 rounded space-y-1">
                          <p>• Consider scheduling this task 15 minutes earlier due to complexity</p>
                          <p>• Recommend additional staff member for this procedure type</p>
                          <p>• Suggested follow-up task: Post-procedure monitoring checklist</p>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <Button>
                          <CheckSquare className="h-4 w-4 mr-1" />
                          Mark Complete
                        </Button>
                        <Button variant="outline">
                          <ArrowUp className="h-4 w-4 mr-1" />
                          Increase Priority
                        </Button>
                        <Button variant="outline">
                          <User className="h-4 w-4 mr-1" />
                          Reassign
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ) : (
                <Card>
                  <CardContent className="p-8 text-center">
                    <p className="text-gray-500">Select a task to view detailed information and management options</p>
                  </CardContent>
                </Card>
              )}
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
