
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';
import { Bell, AlertTriangle, MapPin, Clock, User, Activity } from 'lucide-react';

interface RoomAlert {
  id: string;
  roomNumber: string;
  patientName: string;
  patientId: string;
  alertType: 'fall-risk' | 'cardiac' | 'respiratory' | 'medication' | 'behavioral' | 'infection';
  severity: 'low' | 'medium' | 'high' | 'critical';
  message: string;
  timestamp: string;
  acknowledged: boolean;
  acknowledgedBy?: string;
  escalated: boolean;
  autoGenerated: boolean;
  roomLocation: string;
  vitalSigns?: {
    heartRate?: number;
    bloodPressure?: string;
    oxygenSat?: number;
    temperature?: number;
  };
}

const mockRoomAlerts: RoomAlert[] = [
  {
    id: 'RA001',
    roomNumber: 'B-203',
    patientName: 'Sarah Wilson',
    patientId: 'W002',
    alertType: 'cardiac',
    severity: 'critical',
    message: 'Cardiac arrhythmia detected - Irregular heart rhythm with HR >120 BPM',
    timestamp: '2024-01-22 14:30',
    acknowledged: false,
    escalated: true,
    autoGenerated: true,
    roomLocation: 'ICU - Bed 3',
    vitalSigns: {
      heartRate: 125,
      bloodPressure: '160/95',
      oxygenSat: 94,
      temperature: 99.2
    }
  },
  {
    id: 'RA002',
    roomNumber: 'A-110',
    patientName: 'Robert Chen',
    patientId: 'W008',
    alertType: 'fall-risk',
    severity: 'high',
    message: 'Patient attempted to get up unassisted - Fall risk protocol activated',
    timestamp: '2024-01-22 14:15',
    acknowledged: true,
    acknowledgedBy: 'Nurse Mary',
    escalated: false,
    autoGenerated: false,
    roomLocation: 'General Ward A - Bed 10'
  },
  {
    id: 'RA003',
    roomNumber: 'C-301',
    patientName: 'Maria Garcia',
    patientId: 'W012',
    alertType: 'medication',
    severity: 'medium',
    message: 'Medication administration overdue by 45 minutes',
    timestamp: '2024-01-22 14:00',
    acknowledged: false,
    escalated: false,
    autoGenerated: true,
    roomLocation: 'Surgical Ward - Room 301'
  },
  {
    id: 'RA004',
    roomNumber: 'A-105',
    patientName: 'John Smith',
    patientId: 'W001',
    alertType: 'respiratory',
    severity: 'medium',
    message: 'Oxygen saturation dropped to 89% - Monitoring required',
    timestamp: '2024-01-22 13:45',
    acknowledged: true,
    acknowledgedBy: 'Dr. Johnson',
    escalated: false,
    autoGenerated: true,
    roomLocation: 'General Ward A - Bed 5',
    vitalSigns: {
      heartRate: 88,
      bloodPressure: '125/78',
      oxygenSat: 89,
      temperature: 98.6
    }
  }
];

export const HighRiskAlerts = () => {
  const [alerts, setAlerts] = useState<RoomAlert[]>(mockRoomAlerts);
  const [newAlertsCount, setNewAlertsCount] = useState(0);

  useEffect(() => {
    // Simulate new alerts coming in
    const interval = setInterval(() => {
      const unacknowledged = alerts.filter(alert => !alert.acknowledged).length;
      setNewAlertsCount(unacknowledged);
    }, 1000);

    return () => clearInterval(interval);
  }, [alerts]);

  const acknowledgeAlert = (alertId: string) => {
    setAlerts(prev => prev.map(alert => 
      alert.id === alertId 
        ? { ...alert, acknowledged: true, acknowledgedBy: 'Current User' }
        : alert
    ));
  };

  const escalateAlert = (alertId: string) => {
    setAlerts(prev => prev.map(alert => 
      alert.id === alertId 
        ? { ...alert, escalated: true }
        : alert
    ));
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-600 text-white border-red-600';
      case 'high': return 'bg-orange-500 text-white border-orange-500';
      case 'medium': return 'bg-yellow-500 text-white border-yellow-500';
      case 'low': return 'bg-green-500 text-white border-green-500';
      default: return 'bg-gray-500 text-white border-gray-500';
    }
  };

  const getAlertTypeIcon = (type: string) => {
    switch (type) {
      case 'cardiac': return '💓';
      case 'respiratory': return '🫁';
      case 'fall-risk': return '⚠️';
      case 'medication': return '💊';
      case 'behavioral': return '🧠';
      case 'infection': return '🦠';
      default: return '🚨';
    }
  };

  const getAlertTypeColor = (type: string) => {
    switch (type) {
      case 'cardiac': return 'bg-red-100 text-red-800';
      case 'respiratory': return 'bg-blue-100 text-blue-800';
      case 'fall-risk': return 'bg-yellow-100 text-yellow-800';
      case 'medication': return 'bg-purple-100 text-purple-800';
      case 'behavioral': return 'bg-indigo-100 text-indigo-800';
      case 'infection': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const sortedAlerts = [...alerts].sort((a, b) => {
    // Prioritize unacknowledged alerts
    if (a.acknowledged !== b.acknowledged) {
      return a.acknowledged ? 1 : -1;
    }
    // Then by severity
    const severityOrder = { critical: 0, high: 1, medium: 2, low: 3 };
    const aSeverity = severityOrder[a.severity as keyof typeof severityOrder];
    const bSeverity = severityOrder[b.severity as keyof typeof severityOrder];
    if (aSeverity !== bSeverity) {
      return aSeverity - bSeverity;
    }
    // Finally by timestamp (newest first)
    return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();
  });

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Bell className="h-5 w-5" />
            High-Risk Room Alerts
            {newAlertsCount > 0 && (
              <Badge className="bg-red-600 text-white animate-pulse">
                {newAlertsCount} New
              </Badge>
            )}
          </CardTitle>
          <CardDescription>
            Real-time alerts for high-risk situations across all ward rooms
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {sortedAlerts.map((alert) => (
              <Card 
                key={alert.id} 
                className={`border-l-4 ${
                  alert.acknowledged ? 'opacity-75' : 'shadow-lg'
                } ${
                  alert.severity === 'critical' ? 'border-l-red-600 bg-red-50' :
                  alert.severity === 'high' ? 'border-l-orange-500 bg-orange-50' :
                  'border-l-yellow-500 bg-yellow-50'
                }`}
              >
                <CardContent className="p-4">
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex items-center gap-3">
                      <span className="text-2xl">{getAlertTypeIcon(alert.alertType)}</span>
                      <div>
                        <div className="flex items-center gap-2 mb-1">
                          <h3 className="font-semibold text-lg">{alert.patientName}</h3>
                          <Badge variant="outline">{alert.patientId}</Badge>
                          {alert.escalated && (
                            <Badge className="bg-red-600 text-white text-xs">ESCALATED</Badge>
                          )}
                          {alert.autoGenerated && (
                            <Badge className="bg-blue-600 text-white text-xs">AI DETECTED</Badge>
                          )}
                        </div>
                        <div className="flex items-center gap-2 text-sm text-gray-600">
                          <MapPin className="h-3 w-3" />
                          <span>{alert.roomLocation}</span>
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge className={getSeverityColor(alert.severity)}>
                        {alert.severity.toUpperCase()}
                      </Badge>
                      <Badge className={getAlertTypeColor(alert.alertType)}>
                        {alert.alertType.replace('-', ' ').toUpperCase()}
                      </Badge>
                    </div>
                  </div>

                  <div className="mb-4 p-3 bg-white rounded-lg border">
                    <p className="font-medium text-gray-800">{alert.message}</p>
                    <div className="flex items-center gap-2 mt-2 text-sm text-gray-500">
                      <Clock className="h-3 w-3" />
                      <span>{alert.timestamp}</span>
                    </div>
                  </div>

                  {alert.vitalSigns && (
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-3 mb-4 p-3 bg-gray-50 rounded-lg">
                      {alert.vitalSigns.heartRate && (
                        <div className="text-center">
                          <p className="text-xs text-gray-500">Heart Rate</p>
                          <p className={`font-semibold ${alert.vitalSigns.heartRate > 100 ? 'text-red-600' : ''}`}>
                            {alert.vitalSigns.heartRate} BPM
                          </p>
                        </div>
                      )}
                      {alert.vitalSigns.bloodPressure && (
                        <div className="text-center">
                          <p className="text-xs text-gray-500">Blood Pressure</p>
                          <p className="font-semibold">{alert.vitalSigns.bloodPressure}</p>
                        </div>
                      )}
                      {alert.vitalSigns.oxygenSat && (
                        <div className="text-center">
                          <p className="text-xs text-gray-500">Oxygen Sat</p>
                          <p className={`font-semibold ${alert.vitalSigns.oxygenSat < 95 ? 'text-red-600' : ''}`}>
                            {alert.vitalSigns.oxygenSat}%
                          </p>
                        </div>
                      )}
                      {alert.vitalSigns.temperature && (
                        <div className="text-center">
                          <p className="text-xs text-gray-500">Temperature</p>
                          <p className={`font-semibold ${alert.vitalSigns.temperature > 100.4 ? 'text-red-600' : ''}`}>
                            {alert.vitalSigns.temperature}°F
                          </p>
                        </div>
                      )}
                    </div>
                  )}

                  <div className="flex justify-between items-center">
                    <div className="text-sm">
                      {alert.acknowledged ? (
                        <span className="text-green-600 flex items-center gap-1">
                          <User className="h-3 w-3" />
                          Acknowledged by {alert.acknowledgedBy}
                        </span>
                      ) : (
                        <span className="text-orange-600 font-medium">Requires Acknowledgment</span>
                      )}
                    </div>
                    
                    <div className="flex gap-2">
                      {!alert.acknowledged && (
                        <Button 
                          size="sm" 
                          onClick={() => acknowledgeAlert(alert.id)}
                          className="bg-green-600 hover:bg-green-700"
                        >
                          Acknowledge
                        </Button>
                      )}
                      
                      {!alert.escalated && alert.severity !== 'low' && (
                        <AlertDialog>
                          <AlertDialogTrigger asChild>
                            <Button size="sm" variant="destructive">
                              Escalate
                            </Button>
                          </AlertDialogTrigger>
                          <AlertDialogContent>
                            <AlertDialogHeader>
                              <AlertDialogTitle>Escalate Alert</AlertDialogTitle>
                              <AlertDialogDescription>
                                This will escalate the alert to the attending physician and charge nurse. 
                                Are you sure you want to escalate this {alert.severity} priority alert for {alert.patientName}?
                              </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                              <AlertDialogCancel>Cancel</AlertDialogCancel>
                              <AlertDialogAction onClick={() => escalateAlert(alert.id)}>
                                Escalate Alert
                              </AlertDialogAction>
                            </AlertDialogFooter>
                          </AlertDialogContent>
                        </AlertDialog>
                      )}
                      
                      <Button size="sm" variant="outline">
                        View Room
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Alert Summary</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {['critical', 'high', 'medium', 'low'].map((severity) => {
              const count = alerts.filter(alert => alert.severity === severity && !alert.acknowledged).length;
              return (
                <div key={severity} className="text-center p-4 border rounded-lg">
                  <Badge className={getSeverityColor(severity)} variant="secondary">
                    {severity.toUpperCase()}
                  </Badge>
                  <p className="text-2xl font-bold mt-2">{count}</p>
                  <p className="text-sm text-gray-500">Active Alerts</p>
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
