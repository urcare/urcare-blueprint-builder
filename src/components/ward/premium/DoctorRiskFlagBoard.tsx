
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { AlertTriangle, TrendingUp, Activity, Heart, Brain, Clock } from 'lucide-react';

interface RiskFlag {
  id: string;
  type: 'medical' | 'fall' | 'infection' | 'medication' | 'deterioration' | 'behavioral';
  severity: 'low' | 'medium' | 'high' | 'critical';
  description: string;
  triggers: string[];
  lastUpdated: string;
  autoGenerated: boolean;
}

interface HighRiskPatient {
  patientId: string;
  patientName: string;
  bedNumber: string;
  ward: string;
  riskScore: number;
  flags: RiskFlag[];
  assignedDoctor: string;
  lastAssessment: string;
  interventions: string[];
  trendDirection: 'improving' | 'stable' | 'declining';
}

const mockHighRiskPatients: HighRiskPatient[] = [
  {
    patientId: 'W002',
    patientName: 'Sarah Wilson',
    bedNumber: 'B-203',
    ward: 'ICU',
    riskScore: 95,
    assignedDoctor: 'Dr. Brown',
    lastAssessment: '2024-01-22 06:00',
    trendDirection: 'improving',
    interventions: ['Continuous cardiac monitoring', 'Q2H vital signs', 'Fall precautions'],
    flags: [
      {
        id: 'RF001',
        type: 'medical',
        severity: 'critical',
        description: 'Cardiac arrhythmia with hemodynamic instability',
        triggers: ['Irregular heart rhythm', 'Blood pressure variability', 'EKG abnormalities'],
        lastUpdated: '2024-01-22 05:30',
        autoGenerated: true
      },
      {
        id: 'RF002',
        type: 'deterioration',
        severity: 'high',
        description: 'Early warning score elevated',
        triggers: ['NEWS2 score > 7', 'Respiratory rate increase', 'Altered mental status'],
        lastUpdated: '2024-01-22 04:00',
        autoGenerated: true
      }
    ]
  },
  {
    patientId: 'W008',
    patientName: 'Robert Chen',
    bedNumber: 'A-110',
    ward: 'General Ward A',
    riskScore: 78,
    assignedDoctor: 'Dr. Smith',
    lastAssessment: '2024-01-22 07:30',
    trendDirection: 'stable',
    interventions: ['Daily weight monitoring', 'Fluid restriction', 'Mobility assistance'],
    flags: [
      {
        id: 'RF003',
        type: 'fall',
        severity: 'high',
        description: 'High fall risk due to confusion and mobility issues',
        triggers: ['Morse Fall Scale > 45', 'Recent confusion episodes', 'Unsteady gait'],
        lastUpdated: '2024-01-22 07:00',
        autoGenerated: false
      },
      {
        id: 'RF004',
        type: 'infection',
        severity: 'medium',
        description: 'Potential UTI based on symptoms',
        triggers: ['Urinalysis abnormal', 'Increased confusion', 'Low-grade fever'],
        lastUpdated: '2024-01-21 18:00',
        autoGenerated: true
      }
    ]
  },
  {
    patientId: 'W012',
    patientName: 'Maria Garcia',
    bedNumber: 'C-301',
    ward: 'Surgical Ward',
    riskScore: 82,
    assignedDoctor: 'Dr. Johnson',
    lastAssessment: '2024-01-22 08:00',
    trendDirection: 'declining',
    interventions: ['Pain management protocol', 'Wound care q8h', 'DVT prophylaxis'],
    flags: [
      {
        id: 'RF005',
        type: 'medication',
        severity: 'high',
        description: 'Multiple drug allergies with complex regimen',
        triggers: ['8+ medications', 'Known allergies to 3 drug classes', 'Renal function decline'],
        lastUpdated: '2024-01-22 06:30',
        autoGenerated: false
      },
      {
        id: 'RF006',
        type: 'deterioration',
        severity: 'medium',
        description: 'Post-operative complications risk',
        triggers: ['Surgical site concerns', 'Delayed wound healing', 'Pain score > 7'],
        lastUpdated: '2024-01-22 05:00',
        autoGenerated: true
      }
    ]
  }
];

export const DoctorRiskFlagBoard = () => {
  const [patients, setPatients] = useState<HighRiskPatient[]>(mockHighRiskPatients);
  const [filterSeverity, setFilterSeverity] = useState<string>('all');
  const [filterWard, setFilterWard] = useState<string>('all');

  const getRiskColor = (score: number) => {
    if (score >= 90) return 'bg-red-600 text-white';
    if (score >= 75) return 'bg-orange-500 text-white';
    if (score >= 60) return 'bg-yellow-500 text-white';
    return 'bg-green-500 text-white';
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-600 text-white';
      case 'high': return 'bg-orange-500 text-white';
      case 'medium': return 'bg-yellow-500 text-white';
      case 'low': return 'bg-green-500 text-white';
      default: return 'bg-gray-500 text-white';
    }
  };

  const getFlagIcon = (type: string) => {
    switch (type) {
      case 'medical': return <Heart className="h-4 w-4" />;
      case 'fall': return <AlertTriangle className="h-4 w-4" />;
      case 'infection': return <Activity className="h-4 w-4" />;
      case 'medication': return <AlertTriangle className="h-4 w-4" />;
      case 'deterioration': return <TrendingUp className="h-4 w-4" />;
      case 'behavioral': return <Brain className="h-4 w-4" />;
      default: return <AlertTriangle className="h-4 w-4" />;
    }
  };

  const getTrendIcon = (direction: string) => {
    switch (direction) {
      case 'improving': return '📈';
      case 'stable': return '➡️';
      case 'declining': return '📉';
      default: return '❓';
    }
  };

  const filteredPatients = patients.filter(patient => {
    const severityMatch = filterSeverity === 'all' || 
      patient.flags.some(flag => flag.severity === filterSeverity);
    const wardMatch = filterWard === 'all' || patient.ward === filterWard;
    return severityMatch && wardMatch;
  });

  const wards = [...new Set(patients.map(p => p.ward))];

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <AlertTriangle className="h-5 w-5" />
            Doctor Risk Flag Board
          </CardTitle>
          <CardDescription>
            Real-time monitoring of high-risk patients with automated risk detection
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col md:flex-row gap-4 mb-6">
            <Select value={filterSeverity} onValueChange={setFilterSeverity}>
              <SelectTrigger className="w-full md:w-[200px]">
                <SelectValue placeholder="Filter by severity" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Severities</SelectItem>
                <SelectItem value="critical">Critical</SelectItem>
                <SelectItem value="high">High</SelectItem>
                <SelectItem value="medium">Medium</SelectItem>
                <SelectItem value="low">Low</SelectItem>
              </SelectContent>
            </Select>

            <Select value={filterWard} onValueChange={setFilterWard}>
              <SelectTrigger className="w-full md:w-[200px]">
                <SelectValue placeholder="Filter by ward" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Wards</SelectItem>
                {wards.map(ward => (
                  <SelectItem key={ward} value={ward}>{ward}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="grid gap-4">
            {filteredPatients.map((patient) => (
              <Card key={patient.patientId} className="border-l-4 border-l-red-500">
                <CardContent className="p-4">
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center gap-3">
                      <div className="flex items-center gap-2">
                        <span className="text-xl">{getTrendIcon(patient.trendDirection)}</span>
                        <h3 className="font-semibold text-lg">{patient.patientName}</h3>
                        <Badge variant="outline">{patient.patientId}</Badge>
                      </div>
                    </div>
                    <div className="flex items-center gap-3">
                      <Badge className={getRiskColor(patient.riskScore)}>
                        Risk Score: {patient.riskScore}
                      </Badge>
                      <div className="text-right text-sm text-gray-600">
                        <div>Bed: {patient.bedNumber}</div>
                        <div>{patient.ward}</div>
                      </div>
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                    <div>
                      <h4 className="font-semibold mb-2">Active Risk Flags</h4>
                      <div className="space-y-2">
                        {patient.flags.map((flag) => (
                          <div key={flag.id} className="p-3 border rounded-lg">
                            <div className="flex items-center justify-between mb-2">
                              <div className="flex items-center gap-2">
                                {getFlagIcon(flag.type)}
                                <Badge className={getSeverityColor(flag.severity)}>
                                  {flag.severity.toUpperCase()}
                                </Badge>
                                <Badge variant="outline" className="text-xs">
                                  {flag.type.replace('-', ' ').toUpperCase()}
                                </Badge>
                                {flag.autoGenerated && (
                                  <Badge variant="outline" className="text-xs bg-blue-50">
                                    AI Generated
                                  </Badge>
                                )}
                              </div>
                              <span className="text-xs text-gray-500">
                                <Clock className="h-3 w-3 inline mr-1" />
                                {flag.lastUpdated}
                              </span>
                            </div>
                            <p className="text-sm font-medium mb-2">{flag.description}</p>
                            <div className="text-xs text-gray-600">
                              <strong>Triggers:</strong> {flag.triggers.join(', ')}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>

                    <div>
                      <h4 className="font-semibold mb-2">Current Interventions</h4>
                      <ul className="list-disc list-inside text-sm space-y-1 mb-4">
                        {patient.interventions.map((intervention, index) => (
                          <li key={index}>{intervention}</li>
                        ))}
                      </ul>

                      <div className="text-sm text-gray-600">
                        <p><strong>Assigned Doctor:</strong> {patient.assignedDoctor}</p>
                        <p><strong>Last Assessment:</strong> {patient.lastAssessment}</p>
                        <p><strong>Trend:</strong> 
                          <span className={`ml-1 font-medium ${
                            patient.trendDirection === 'improving' ? 'text-green-600' :
                            patient.trendDirection === 'declining' ? 'text-red-600' :
                            'text-yellow-600'
                          }`}>
                            {patient.trendDirection.toUpperCase()}
                          </span>
                        </p>
                      </div>
                    </div>
                  </div>

                  <div className="flex justify-between items-center pt-4 border-t">
                    <div className="text-sm text-gray-600">
                      {patient.flags.filter(f => f.severity === 'critical' || f.severity === 'high').length} high-priority flags
                    </div>
                    <div className="flex gap-2">
                      <Button variant="outline" size="sm">
                        Update Assessment
                      </Button>
                      <Button variant="outline" size="sm">
                        Add Intervention
                      </Button>
                      <Button size="sm" className="bg-red-600 hover:bg-red-700">
                        Emergency Review
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Risk Summary Dashboard</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {['critical', 'high', 'medium', 'low'].map((severity) => {
              const flagCount = patients.reduce((sum, patient) => 
                sum + patient.flags.filter(flag => flag.severity === severity).length, 0
              );
              return (
                <div key={severity} className="text-center p-4 border rounded-lg">
                  <Badge className={getSeverityColor(severity)} variant="secondary">
                    {severity.toUpperCase()}
                  </Badge>
                  <p className="text-2xl font-bold mt-2">{flagCount}</p>
                  <p className="text-sm text-gray-500">Active Flags</p>
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
